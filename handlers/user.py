from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext

from datetime import datetime
from states import Registration, RequestState, FeedbackState
from keyboards.user_keyboards import (
    get_user_main_menu,
    get_category_keyboard,
    get_preview_keyboard
)
from database import (
    is_token_valid,
    mark_token_as_used,
    get_user,
    add_user,
    add_request,
    get_request,
    get_user_requests,
    get_user_feedback,
    get_all_hr_ids,
    add_anonymous_feedback,
    get_new_feedback
)

import uuid

user_router = Router()
PAGE_SIZE = 10


@user_router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    if get_user(message.from_user.id):
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç üëã –í—ñ—Ç–∞—î–º–æ –≤ HR-–≤—ñ–¥–¥—ñ–ª—ñ. –¢—É—Ç —Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–±–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∞–Ω–æ–Ω—ñ–º–Ω–∏–º —Ñ—ñ–¥–±–µ–∫–æ–º. –ú–∏ —á–∏—Ç–∞—î–º–æ —Ç–∞ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üôå",
            reply_markup=get_user_main_menu()
        )
    else:
        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ª–æ–≥—ñ–Ω:")
        await state.set_state(Registration.token)


@user_router.message(Registration.token)
async def token_handler(message: Message, state: FSMContext):
    token = message.text.strip()
    if is_token_valid(token):
        await state.update_data(token=token)
        await message.answer("üë§ –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë:")
        await state.set_state(Registration.full_name)
    else:
        await message.answer("üö´ –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@user_router.message(Registration.full_name)
async def full_name_handler(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer("üè¢ –í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª:")
    await state.set_state(Registration.department)


@user_router.message(Registration.department)
async def department_handler(message: Message, state: FSMContext):
    await state.update_data(department=message.text.strip())
    await message.answer("üíº –í–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∞–¥—É:")
    await state.set_state(Registration.position)


@user_router.message(Registration.position)
async def position_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    add_user(
        message.from_user.id,
        data["full_name"],
        data["department"],
        message.text.strip()
    )
    mark_token_as_used(data["token"])
    await message.answer(
        "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        reply_markup=get_user_main_menu()
    )
    await state.clear()


@user_router.message(F.text == "üì© –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")
async def new_request(message: Message, state: FSMContext):
    await message.answer(
        "–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ —Ç–µ–º—É, –∞ –º–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ç–≤–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—èüëá",
        reply_markup=get_category_keyboard()
    )
    await state.set_state(RequestState.choose_category)


@user_router.message(RequestState.choose_category)
async def category_chosen(message: Message, state: FSMContext):
    await state.update_data(category=message.text.strip())
    await message.answer("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–ø–∏—Ç—É ‚Äî –Ω–µ –±—ñ–π—Å—è –¥–µ—Ç–∞–ª–µ–π. –©–æ —Å—Ç–∞–ª–æ—Å—å? –Ø–∫ –º–∏ –º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
    await state.set_state(RequestState.enter_text)


@user_router.message(RequestState.enter_text)
async def text_or_media_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    media_list = data.get("media", [])
    text = data.get("text", "")

    if message.text:
        text = message.text.strip()
    elif message.caption:
        text = message.caption.strip()

    if message.photo:
        media_list.append(("photo", message.photo[-1].file_id))
    if message.document:
        media_list.append(("document", message.document.file_id))
    if message.video:
        media_list.append(("video", message.video.file_id))
    if message.voice:
        media_list.append(("voice", message.voice.file_id))

    await state.update_data(text=text, media=media_list)

    preview_text = (
        f"üìÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞—è–≤–∫—É:</b>\n\n"
        f"üìÇ {data['category']}\n"
        f"üìù {text or '-'}"
    )
    if media_list:
        preview_text += f"\n\nüìé –î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(media_list)}"

    await message.answer(preview_text, parse_mode="HTML", reply_markup=get_preview_keyboard())
    await state.set_state(RequestState.confirm)


@user_router.callback_query(F.data == "send_request")
async def confirm_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    text = data.get("text") or ""
    rid = add_request(callback.from_user.id, data["category"], text)
    _, num = get_request(rid)

    rec = get_user(callback.from_user.id)
    full_name, department, position = rec[1], rec[2], rec[3]
    username = callback.from_user.username or "‚Äî"

    for hr_id in get_all_hr_ids():
        await callback.bot.send_message(
            hr_id,
            (
                f"üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{num}</b>\n"
                f"üë§ {full_name} (@{username})\n"
                f"üè¢ {department} | üíº {position}\n\n"
                f"üìÇ {data['category']}\n"
                f"üìù {text}"
            ),
            parse_mode="HTML"
        )
        for mtype, file_id in data.get("media", []):
            caption = f"üìé –ú–µ–¥—ñ–∞ –¥–æ –∑–∞—è–≤–∫–∏ ‚Ññ{num}"
            try:
                if mtype == "photo":
                    await callback.bot.send_photo(hr_id, file_id, caption=caption)
                elif mtype == "document":
                    await callback.bot.send_document(hr_id, file_id, caption=caption)
                elif mtype == "video":
                    await callback.bot.send_video(hr_id, file_id, caption=caption)
                elif mtype == "voice":
                    await callback.bot.send_voice(hr_id, file_id, caption=caption)
            except Exception as e:
                print("Error sending media:", e)

    await callback.message.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        f"‚úÖ –î—è–∫—É—î–º–æ, –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç üí¨ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º ‚Ññ{num}. HR –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é. –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó –ø—Ä–æ—Ç—è–≥–æ–º 8 —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω.",
        reply_markup=get_user_main_menu()
    )
    await state.clear()



@user_router.callback_query(F.data == "edit_request")
async def edit_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:")
    await state.set_state(RequestState.enter_text)


@user_router.callback_query(F.data == "cancel_request")
async def cancel_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.bot.send_message(
        callback.from_user.id,
        "üìã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é",
        reply_markup=get_user_main_menu()
    )
    await state.clear()


async def _render_user_history(user_id: int, offset: int):
    raw_reqs = get_user_requests(user_id)
    raw_fbs = get_user_feedback(user_id)

    items = []
    for num, cat, txt, status, resp, hr_name, created, updated in raw_reqs:
        ts_str = updated or created
        ts = datetime.fromisoformat(ts_str)
        items.append(("req", (num, cat, txt, status, resp, hr_name, created, updated), ts))
    for fid, fb_text, fb_resp, created_fb, responded_at, fb_hr in raw_fbs:
        ts_str = responded_at or created_fb
        ts = datetime.fromisoformat(ts_str)
        items.append(("fb", (fid, fb_text, fb_resp, created_fb, responded_at, fb_hr), ts))

    items.sort(key=lambda x: x[2], reverse=True)

    page = items[offset: offset + PAGE_SIZE]
    if not page:
        return "üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.", None

    parts = []
    for kind, fields, _ in page:
        if kind == "req":
            num, cat, txt, status, resp, hr_name, created, updated = fields
            parts.append(
                f"üìå <b>–ó–∞—è–≤–∫–∞ ‚Ññ{num}</b>\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {cat}\n"
                f"üìù –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {txt}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created}\n"
                f"üïí –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ: {updated or '‚è±Ô∏è'}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üë• HR: {hr_name or '‚è≥'}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {resp or 'üí§'}"
            )
        else:
            fid, fb_text, fb_resp, created_fb, responded_at, fb_hr = fields
            parts.append(
                f"ü•∑ <b>–ê–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫ ‚Ññ{fid}</b>\n"
                f"üìù –¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É: {fb_text}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_fb}\n"
                f"üïí –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ: {responded_at or '‚è±Ô∏è'}\n"
                f"üë• HR: {fb_hr or '‚è≥'}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {fb_resp or 'üí§'}"
            )

    text = "\n\n".join(parts)
    buttons = []
    total = len(items)
    if offset >= PAGE_SIZE:
        buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ",
                callback_data=f"user_history_prev_{offset - PAGE_SIZE}"
            )
        )
    if offset + PAGE_SIZE < total:
        buttons.append(
            InlineKeyboardButton(
                text="–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è",
                callback_data=f"user_history_next_{offset + PAGE_SIZE}"
            )
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None
    return text, kb


@user_router.message(F.text == "üìë –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ—î—ó –∑–∞—è–≤–∏")
async def my_requests(message: Message):
    text, kb = await _render_user_history(message.from_user.id, 0)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@user_router.callback_query(F.data.startswith("user_history_next_"))
async def user_history_next(cb: CallbackQuery):
    await cb.answer()
    offset = int(cb.data.rsplit("_", 1)[1])
    text, kb = await _render_user_history(cb.from_user.id, offset)
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)


@user_router.callback_query(F.data.startswith("user_history_prev_"))
async def user_history_prev(cb: CallbackQuery):
    await cb.answer()
    offset = int(cb.data.rsplit("_", 1)[1])
    text, kb = await _render_user_history(cb.from_user.id, offset)
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)



@user_router.message(F.text == "üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫")
async def anonymous_feedback(message: Message, state: FSMContext):
    await message.answer(
        "‚úèÔ∏è –ú–æ–∂–µ—à –≤—ñ–ª—å–Ω–æ –≤–∏—Å–ª–æ–≤–∏—Ç–∏—Å—å. –ú–∏ –Ω–µ –±–∞—á–∏–º–æ, —Ö—Ç–æ —Ü–µ –Ω–∞–ø–∏—Å–∞–≤, –∞–ª–µ –º–∏ —Ç–æ—á–Ω–æ –∑–≤–µ—Ä–Ω–µ–º–æ —É–≤–∞–≥—É –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è."
    )
    await state.set_state(FeedbackState.enter_text)


@user_router.message(FeedbackState.enter_text)
async def feedback_text_entered(message: Message, state: FSMContext):

    txt = (message.text or message.caption or "").strip()

    if not txt and not (message.photo or message.document or message.video or message.voice):
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –ø—Ä–∏–∫—Ä—ñ–ø–∏ –º–µ–¥—ñ–∞.")
        return

    await state.update_data(fb_text=txt)

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_feedback"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_feedback"),
        InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_feedback"),
    ]])

    preview = f"üìÑ <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫:</b>\n\n"
    if txt:
        preview += f"üìù {txt}"
    if message.photo or message.document or message.video or message.voice:
        preview += "\n\nüìé –î–æ–¥–∞–Ω–æ –º–µ–¥—ñ–∞"

    await message.answer(preview, parse_mode="HTML", reply_markup=kb)


@user_router.callback_query(F.data == "send_feedback")
async def send_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    fb_text = data["fb_text"]
    add_anonymous_feedback(callback.from_user.id, fb_text)
    fbs = get_new_feedback()
    fid = fbs[-1][0] if fbs else None

    for hr_id in get_all_hr_ids():
        await callback.bot.send_message(
            hr_id,
            f"üí¨ <b>–ù–æ–≤–∏–π –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫ ‚Ññ{fid}</b>\n\n{fb_text}",
            parse_mode="HTML"
        )

    await callback.message.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        f"‚úÖ –î—è–∫—É—î–º–æ. –ê–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫ ‚Ññ{fid} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –π–æ–≥–æ –ø—Ä–æ—Ç—è–≥–æ–º 8 —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω. –Ø–∫—â–æ —Å–∏—Ç—É–∞—Ü—ñ—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∞ ‚Äî –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ HR –æ—Å–æ–±–∏—Å—Ç–æ.",
        reply_markup=get_user_main_menu()
    )
    await state.clear()


@user_router.callback_query(F.data == "edit_feedback")
async def edit_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É:"
    )


@user_router.callback_query(F.data == "cancel_feedback")
async def cancel_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        "‚ùå –ê–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=get_user_main_menu()
    )
    await state.clear()
